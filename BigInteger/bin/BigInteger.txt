
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BigInteger {
	// field

	private int[] numbers = new int[500];
	private boolean signed = true;
	private int length = 0;

	// field end

	public static final String QUIT_COMMAND = "quit";
	public static final String MSG_INVALID_INPUT = "입력이 잘못되었습니다.";

	public static final Pattern EXPRESSION_PATTERN = Pattern.compile("(\\D?)(\\d+)(\\D)(\\D?)(\\d+)");

	// constructors

	public BigInteger() {
	}

	public BigInteger(String signed, String num) {

		this.setSigned(signed);
		for (int i = num.length() - 1; i >= 0; i--) {
			this.numbers[i] = (int) (num.charAt(num.length() - i - 1) - '0');
		}
		this.setLength();
	}

	// constructors end

	// method
	public void setLength() {
		setLength(this.numbers.length);
		return;
	}

	public void setLength(int known) {
		for (int i = known - 1; i >= 0; i--) {
			if (this.numbers[i] != 0) {
				this.length = i + 1;
				return;
			}
		}
		this.length = 1;
		return;
	}

	public void setSigned(String signed) {
		this.signed = (!signed.equals("-"));
	}

	public boolean isAbsoluteBiggerThan(BigInteger big) {
		if (this.length == big.length) {
			for (int i = this.length - 1; i >= 0; i--) {
				if (this.numbers[i] < big.numbers[i]) {
					return false;
				}
				else if(this.numbers[i] > big.numbers[i]) {
					return true;
				}
			}
			return true;
		}
		return this.length > big.length;
	}

	public BigInteger add(BigInteger big) {

		BigInteger result = new BigInteger();

		for (int i = 0; i < Math.max(this.length, big.length); i++) {
			result.numbers[i] += this.numbers[i] + big.numbers[i];
			if (result.numbers[i] >= 10) {
				result.numbers[i] -= 10;
				result.numbers[i + 1] += 1;
			}
		}

		result.signed = this.signed;
		result.setLength(Math.max(this.length, big.length) + 1);
		return result;
	}

	public BigInteger subtract(BigInteger big) {

		BigInteger result = new BigInteger();

		for (int i = 0; i < Math.max(this.length, big.length); i++) {
			result.numbers[i] += this.numbers[i] - big.numbers[i];
			if (result.numbers[i] < 0) {
				result.numbers[i] += 10;
				result.numbers[i + 1] -= 1;
			}
		}

		result.signed = this.signed;
		result.setLength(Math.max(this.length, big.length));
		return result;
	}

	public BigInteger multiply(BigInteger big) {

		BigInteger result = new BigInteger();

		for (int i = 0; i < this.length; i++) {
			for (int j = 0; j < big.length; j++) {
				result.numbers[i + j] += this.numbers[i] * big.numbers[j];
			}
		}
		for (int i = 0; i < this.length + big.length; i++) {
			if (result.numbers[i] >= 10) {
				result.numbers[i + 1] += result.numbers[i] / 10;
				result.numbers[i] = result.numbers[i] % 10;
			}
		}

		result.signed = !(this.signed ^ big.signed);
		result.setLength(this.length + big.length + 1);
		return result;
	}

	@Override
	public String toString() {
		String result = new String();
		if (signed) {
			result = "";
		} else {
			result = "-";
		}
		int i;

		for (i = this.length - 1; this.numbers[i] == 0 && i != 0; i--)
			;

		for (; i >= 0; i--) {
			result += this.numbers[i];
		}
		if (result.equals("-0"))
			result = "0";
		return result;
	}

	public static BigInteger evaluate(String input) throws IllegalArgumentException {

		Matcher matcher = EXPRESSION_PATTERN.matcher(input);
		matcher.matches();

		BigInteger num1 = new BigInteger(matcher.group(1), matcher.group(2));
		BigInteger num2 = new BigInteger(matcher.group(4), matcher.group(5));
		char operator = matcher.group(3).charAt(0);

		if (operator == '*')
			return num1.multiply(num2);
		else if (operator == '+' && (num1.signed == num2.signed)) {
			return num1.add(num2);
		} else if (operator == '-' && (num1.signed != num2.signed)) {
			num2.signed = false;
			return num1.add(num2);
		}
		if (operator == '-'){
			num2.signed = !num2.signed;
			}
		if (num1.isAbsoluteBiggerThan(num2)){
			return num1.subtract(num2);
			}
		else return num2.subtract(num1);
	}

	public static void main(String[] args) throws Exception {

		try (InputStreamReader isr = new InputStreamReader(System.in)) {
			try (BufferedReader reader = new BufferedReader(isr)) {
				boolean done = false;
				while (!done) {
					String input = reader.readLine();
					input = input.replaceAll("\\s+", "");

					try {
						done = processInput(input);
					} catch (IllegalArgumentException e) {
						System.err.println(MSG_INVALID_INPUT);
					}
				}
			}
		}
	}

	static boolean processInput(String input) throws IllegalArgumentException {
		boolean quit = isQuitCmd(input);

		if (quit) {
			return true;
		} else {
			if (!EXPRESSION_PATTERN.matcher(input).matches()) {
				System.err.println(MSG_INVALID_INPUT);
			}
			
			BigInteger result = BigInteger.evaluate(input);

			System.out.println(result.toString());

			return false;
		}
	}

	static boolean isQuitCmd(String input) {
		return input.equalsIgnoreCase(QUIT_COMMAND);
	}
}